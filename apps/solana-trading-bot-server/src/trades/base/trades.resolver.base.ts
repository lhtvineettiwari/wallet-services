/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Trades } from "./Trades";
import { TradesCountArgs } from "./TradesCountArgs";
import { TradesFindManyArgs } from "./TradesFindManyArgs";
import { TradesFindUniqueArgs } from "./TradesFindUniqueArgs";
import { CreateTradesArgs } from "./CreateTradesArgs";
import { UpdateTradesArgs } from "./UpdateTradesArgs";
import { DeleteTradesArgs } from "./DeleteTradesArgs";
import { TradesService } from "../trades.service";
@graphql.Resolver(() => Trades)
export class TradesResolverBase {
  constructor(protected readonly service: TradesService) {}

  async _tradesItemsMeta(
    @graphql.Args() args: TradesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Trades])
  async tradesItems(
    @graphql.Args() args: TradesFindManyArgs
  ): Promise<Trades[]> {
    return this.service.tradesItems(args);
  }

  @graphql.Query(() => Trades, { nullable: true })
  async trades(
    @graphql.Args() args: TradesFindUniqueArgs
  ): Promise<Trades | null> {
    const result = await this.service.trades(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Trades)
  async createTrades(@graphql.Args() args: CreateTradesArgs): Promise<Trades> {
    return await this.service.createTrades({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Trades)
  async updateTrades(
    @graphql.Args() args: UpdateTradesArgs
  ): Promise<Trades | null> {
    try {
      return await this.service.updateTrades({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Trades)
  async deleteTrades(
    @graphql.Args() args: DeleteTradesArgs
  ): Promise<Trades | null> {
    try {
      return await this.service.deleteTrades(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
