/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Trades as PrismaTrades } from "@prisma/client";

export class TradesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TradesCountArgs, "select">): Promise<number> {
    return this.prisma.trades.count(args);
  }

  async tradesItems<T extends Prisma.TradesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TradesFindManyArgs>
  ): Promise<PrismaTrades[]> {
    return this.prisma.trades.findMany<Prisma.TradesFindManyArgs>(args);
  }
  async trades<T extends Prisma.TradesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TradesFindUniqueArgs>
  ): Promise<PrismaTrades | null> {
    return this.prisma.trades.findUnique(args);
  }
  async createTrades<T extends Prisma.TradesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TradesCreateArgs>
  ): Promise<PrismaTrades> {
    return this.prisma.trades.create<T>(args);
  }
  async updateTrades<T extends Prisma.TradesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TradesUpdateArgs>
  ): Promise<PrismaTrades> {
    return this.prisma.trades.update<T>(args);
  }
  async deleteTrades<T extends Prisma.TradesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TradesDeleteArgs>
  ): Promise<PrismaTrades> {
    return this.prisma.trades.delete(args);
  }
}
