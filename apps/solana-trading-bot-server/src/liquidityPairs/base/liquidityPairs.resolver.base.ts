/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LiquidityPairs } from "./LiquidityPairs";
import { LiquidityPairsCountArgs } from "./LiquidityPairsCountArgs";
import { LiquidityPairsFindManyArgs } from "./LiquidityPairsFindManyArgs";
import { LiquidityPairsFindUniqueArgs } from "./LiquidityPairsFindUniqueArgs";
import { CreateLiquidityPairsArgs } from "./CreateLiquidityPairsArgs";
import { UpdateLiquidityPairsArgs } from "./UpdateLiquidityPairsArgs";
import { DeleteLiquidityPairsArgs } from "./DeleteLiquidityPairsArgs";
import { LiquidityPairsService } from "../liquidityPairs.service";
@graphql.Resolver(() => LiquidityPairs)
export class LiquidityPairsResolverBase {
  constructor(protected readonly service: LiquidityPairsService) {}

  async _liquidityPairsItemsMeta(
    @graphql.Args() args: LiquidityPairsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LiquidityPairs])
  async liquidityPairsItems(
    @graphql.Args() args: LiquidityPairsFindManyArgs
  ): Promise<LiquidityPairs[]> {
    return this.service.liquidityPairsItems(args);
  }

  @graphql.Query(() => LiquidityPairs, { nullable: true })
  async liquidityPairs(
    @graphql.Args() args: LiquidityPairsFindUniqueArgs
  ): Promise<LiquidityPairs | null> {
    const result = await this.service.liquidityPairs(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LiquidityPairs)
  async createLiquidityPairs(
    @graphql.Args() args: CreateLiquidityPairsArgs
  ): Promise<LiquidityPairs> {
    return await this.service.createLiquidityPairs({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LiquidityPairs)
  async updateLiquidityPairs(
    @graphql.Args() args: UpdateLiquidityPairsArgs
  ): Promise<LiquidityPairs | null> {
    try {
      return await this.service.updateLiquidityPairs({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LiquidityPairs)
  async deleteLiquidityPairs(
    @graphql.Args() args: DeleteLiquidityPairsArgs
  ): Promise<LiquidityPairs | null> {
    try {
      return await this.service.deleteLiquidityPairs(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
