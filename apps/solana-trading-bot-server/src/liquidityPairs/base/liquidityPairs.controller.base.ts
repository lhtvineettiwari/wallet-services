/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LiquidityPairsService } from "../liquidityPairs.service";
import { LiquidityPairsCreateInput } from "./LiquidityPairsCreateInput";
import { LiquidityPairs } from "./LiquidityPairs";
import { LiquidityPairsFindManyArgs } from "./LiquidityPairsFindManyArgs";
import { LiquidityPairsWhereUniqueInput } from "./LiquidityPairsWhereUniqueInput";
import { LiquidityPairsUpdateInput } from "./LiquidityPairsUpdateInput";

export class LiquidityPairsControllerBase {
  constructor(protected readonly service: LiquidityPairsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LiquidityPairs })
  async createLiquidityPairs(
    @common.Body() data: LiquidityPairsCreateInput
  ): Promise<LiquidityPairs> {
    return await this.service.createLiquidityPairs({
      data: data,
      select: {
        createdAt: true,
        creationDate: true,
        id: true,
        pairName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LiquidityPairs] })
  @ApiNestedQuery(LiquidityPairsFindManyArgs)
  async liquidityPairsItems(
    @common.Req() request: Request
  ): Promise<LiquidityPairs[]> {
    const args = plainToClass(LiquidityPairsFindManyArgs, request.query);
    return this.service.liquidityPairsItems({
      ...args,
      select: {
        createdAt: true,
        creationDate: true,
        id: true,
        pairName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LiquidityPairs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async liquidityPairs(
    @common.Param() params: LiquidityPairsWhereUniqueInput
  ): Promise<LiquidityPairs | null> {
    const result = await this.service.liquidityPairs({
      where: params,
      select: {
        createdAt: true,
        creationDate: true,
        id: true,
        pairName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LiquidityPairs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLiquidityPairs(
    @common.Param() params: LiquidityPairsWhereUniqueInput,
    @common.Body() data: LiquidityPairsUpdateInput
  ): Promise<LiquidityPairs | null> {
    try {
      return await this.service.updateLiquidityPairs({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creationDate: true,
          id: true,
          pairName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LiquidityPairs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLiquidityPairs(
    @common.Param() params: LiquidityPairsWhereUniqueInput
  ): Promise<LiquidityPairs | null> {
    try {
      return await this.service.deleteLiquidityPairs({
        where: params,
        select: {
          createdAt: true,
          creationDate: true,
          id: true,
          pairName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
