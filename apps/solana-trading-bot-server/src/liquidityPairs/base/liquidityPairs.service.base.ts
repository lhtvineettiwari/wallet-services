/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LiquidityPairs as PrismaLiquidityPairs } from "@prisma/client";

export class LiquidityPairsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LiquidityPairsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.liquidityPairs.count(args);
  }

  async liquidityPairsItems<T extends Prisma.LiquidityPairsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiquidityPairsFindManyArgs>
  ): Promise<PrismaLiquidityPairs[]> {
    return this.prisma.liquidityPairs.findMany<Prisma.LiquidityPairsFindManyArgs>(
      args
    );
  }
  async liquidityPairs<T extends Prisma.LiquidityPairsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiquidityPairsFindUniqueArgs>
  ): Promise<PrismaLiquidityPairs | null> {
    return this.prisma.liquidityPairs.findUnique(args);
  }
  async createLiquidityPairs<T extends Prisma.LiquidityPairsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiquidityPairsCreateArgs>
  ): Promise<PrismaLiquidityPairs> {
    return this.prisma.liquidityPairs.create<T>(args);
  }
  async updateLiquidityPairs<T extends Prisma.LiquidityPairsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiquidityPairsUpdateArgs>
  ): Promise<PrismaLiquidityPairs> {
    return this.prisma.liquidityPairs.update<T>(args);
  }
  async deleteLiquidityPairs<T extends Prisma.LiquidityPairsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiquidityPairsDeleteArgs>
  ): Promise<PrismaLiquidityPairs> {
    return this.prisma.liquidityPairs.delete(args);
  }
}
